configuration:
  syncedExploreTopics:
    - [0, 1]
  clusterReductionFactor:
    max: 10.0
    min: 8.0
  coverage:
    enable: True # If True, then logs coverage info
    mode: "msg" # topic mode (sends message to /testit/flush_coverage to get coverage data from hosts)
    reportingTimeLimit: 2.0 # reporting time allocation

  inputs: # SUT inputs (e.g., commands to SUT), triggers log entry
    - identifier: "/robot_0/move_base_simple/goal" # topic/service proxy name (with full namespace, i.e., "/robot/odom")
      proxy: "" # advertised proxy service name (reroutes the service to "identifier" service); if empty (""), "topic"-mode is assumed
      type: "geometry_msgs.msg.PoseStamped" # topic/service proxy as string (e.g., "std_srvs.srv.Int32"); supports services ("srv"), topics ("msg") and actions ("Action")
      timeout: 120 # maximum time in seconds to wait for feedback
      explore:
        continue: false
        variables:
          - field: "pose.position.x"
            step: 1
            initial: 2
          - field: "pose.position.y"
            step: 1
            initial: 36
        constants:
          - field: "pose.orientation.z"
            value: 0
          - field: "pose.orientation.w"
            value: 1
          - field: "header.frame_id"
            value: "map"
      cluster:
        resolution: 0.1
      feedback:
        topic: "/robot_0/move_base/result" # feedback topic for asynchronous command (e.g., "/robot_0/move_base/result"); If using service proxy mode, leave empty ("") to use service proxy result as feedback; If in "topic"-mode and left empty (""), command is considered to be a success without feedback
        type: "move_base_msgs.msg.MoveBaseActionResult" # feedback topic type (e.g., "move_base_msgs.msg.MoveBaseActionResult")
        field: "status.text" # feedback topic field (e.g., "status.text")
        success: "Goal reached." # regex to consider action as a success (e.g., "Goal reached.") or value (in case of non-string)
        failure: "" # regex to consider action as a failure or value (in case of non-string

    - identifier: "/robot_0/plant_unknown_object" # topic/service proxy name (with full namespace, i.e., "/robot/odom")
      proxy: "" # advertised proxy service name (reroutes the service to "identifier" service); if empty (""), "topic"-mode is assumed
      type: "std_msgs.msg.Bool" # topic/service proxy as string (e.g., "std_srvs.srv.Int32"); supports services ("srv"), topics ("msg") and actions ("Action")
      timeout: 120 # maximum time in seconds to wait for feedback
      explore:
        continue: false
        goals:
          file: ""
        constants:
          - field: "data"
            value: true
      cluster:
        by: # Default all variables
          feedback:
            success: 1
            fail: 0
          timestamp: "feedback" # alternative: "input"
        normalise: ["feedback", "timestamp"] # keys from cluster.by; default: feedback, timestamp if exist
      feedback:
        topic: "/unknown_object/planted" # feedback topic for asynchronous command (e.g., "/robot_0/move_base/result"); If using service proxy mode, leave empty ("") to use service proxy result as feedback; If in "topic"-mode and left empty (""), command is considered to be a success without feedback
        type: "std_msgs.msg.Bool" # feedback topic type (e.g., "move_base_msgs.msg.MoveBaseActionResult")
        field: "data" # feedback topic field (e.g., "status.text")
        success: true

  outputs: # SUT outputs (monitored values)
    - identifier: "" # topic (with full namespace, i.e., "/robot/odom")
      type: "" # topic as string delimited with a period sign (e.g., "std_msgs.msg.Int32")
      resolution: # resolution/rounding to reduce state space (i.e., if resolution is 0.1, then 19.22 -> 19.2 and 19.26 -> 19.3)
        - field: "" # field name within the topic
          resolution: 0.1 # desired logging resolution
      buffer:
        size: 1 # number of elements in the ring buffer
        hz: 1 # max frequency to update the buffer
        mode: "max" # the op
